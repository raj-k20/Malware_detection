from glob import *
from math import *
from operator import *
from os import walk
from sklearn.svm import LinearSVC
import _pickle as cPickle
folders=['benign1','malware1']
length=[0 for i in range(len(folders))]
filenames=[]
label=[]
for i in range(len(folders)):
	foldername=folders[i]
	files='./'+ foldername+'/*.txt'
	filess=glob(files)
	filenames.append(filess)
	length[i]=len(filess)
datapoint=[[] for i in range(len(folders)+1)]

finalList=[]
for j in range(len(filenames)):
     fileinfolder=filenames[j]
     for files in fileinfolder:
          nitk=[]
          f=open(files,'r')
          for line in f:
             datapoint[j].append(line.strip())
             nitk.append(line.strip())
          finalList.append(nitk)
datapoint[-1]=datapoint[-1]+ datapoint[0]+datapoint[1]
final_dictionary=[{} for k in range(len(folders)+1)]
for k in range(len(datapoint)):
       for i in datapoint[k]:
           if i not in final_dictionary[k]:
                      final_dictionary[k][i]=0      
           final_dictionary[k][i]+=1
#print("Dictionary",final_dictionary)



nooffiles=sum(length)
IG_dict={}
entropy=0
ans=0.0
for i in range(len(length)):
      l=float(length[i])/nooffiles
      k = abs(l)
      ans = k*(log(k,2))
      entropy+=ans
#print("Base Entropy=",entropy)
I={}

distinct=[]

for k,v in final_dictionary[-1].items():
	distinct.append(k)
	

for i in range(len(distinct)):
        if(pp3==0):
        part2=0
        
      else:
          part2=(-1)*(pp3/pp1)*log(pp3/pp1,2)
      fpart3=(pp1)/nooffiles*(part1+part2)
      
      
      IG=entropy-fpart2-fpart3
      I[distinct[i]]=IG
     
      d1=p1/nooffiles
      d2=float(pp1)/nooffiles
      si=(-1)*d1*log(d1,2)
      sj=(-1)*d2*log(d2,2)
      sumj=si+sj
      if sumj == 0:
           finalanswer=0
      else: 
           finalanswer=float(IG)/sumj
      IG_dict[datapoint[-1][i]]=finalanswer
      print("Datapoint Considered",distinct[i])
      print("Information Gain",entropy,fpart2,fpart3,IG)
      print("Gain Ratio=",d1,d2,si,sj,sumj,finalanswer)
#print(IG_dict)
count1=0
count2=0
final_feature={}
final=sorted(IG_dict.items(),key=itemgetter(0))
for k,v in final_dictionary[0].items():
	if k not in final_dictionary[1]:
		final_feature[k]=0


for k,v in final_dictionary[1].items():
	if k not in final_dictionary[0]:
		final_feature[k]=1

ki= []
pk=[]
for k,v in final_feature.items():
	if v == 1:
		ki.append(k)
	else:
		pk.append(k)
h = pk[0:500]
h = h+ki[0:500]
'''
jk=[]
lk=[]
for k,v in final_feature.items():
	if v == 1:
		jk.append(k)
	else:
		lk.append(k)
k=jk[0:200]
k=k+lk[0:200]'''

kil=[]
for k in finalList:
	po=[]
	for t in k:
		if t in h:
			po.append(int(t,16))
	kil.append(po)
		

#print(kil)
'''
for i in range(len(finalList)):
	for j in range(len(finalList[i])):
		print("i,j",finalList[i][j])
		if(finalList[i][j] not in h):
			finalList[i].remove(finalList[i][j])
		else:
			r=int(finalList[i][j],16)
			finalList[i][j]=r
			print("fl",finalList[i][j])'''
#print(finalList)
		

path = "/home/rajesh/IAS/ij"
for (dirpath, dirnames, filenames) in walk(path):
	for name in filenames:
		if name.endswith((".txt")):
			if "malware1" in dirpath:
				label.append(1)
			elif "benign1" in dirpath:
				label.append(-1)
length=len(h)
for i in range(len(kil)):
	l=len(kil[i])
	j=length-l
	ll=[0 for q in range(j)]
	kil[i]=kil[i]+ll
	

print(label)  
labels=["benign","malware"]
model = LinearSVC(C=10 ** -1)
model.fit(kil, label)

files=[]
foldernames=['tester']
for i in range(len(foldernames)):
	foldername=foldernames[i]
	files1='./'+ foldername+'/*.txt'
	filess=glob(files1)
	files.append(filess)
datapoint=[[] for i in range(len(foldernames))]

final=[]
for j in range(len(foldernames)):
     fileinfolder=files[j]
     for files in fileinfolder:
          nitk=[]
          f=open(files,'r')
          for line in f:
             datapoint[j].append(line.strip())
             nitk.append(line.strip())
          final.append(nitk)
bil=[]
for k in final:
	po=[]
	for t in k:
		if t in h:
			po.append(int(t,16))
	bil.append(po)

length=len(h)
for i in range(len(bil)):
	l=len(bil[i])
	j=length-l
	ll=[0 for q in range(j)]
	bil[i]=bil[i]+ll
	
prediction=model.predict(bil)
print(prediction)

